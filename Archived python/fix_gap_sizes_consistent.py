#!/usr/bin/env python3
"""
Fix Gap Sizes - Make consistent small gaps (about 1/3 of current size)
Updates both MagicCard.tsx and MTGOLayout.tsx to use smaller, consistent gaps
"""

def fix_magic_card_gaps():
    file_path = "src/components/MagicCard.tsx"
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("‚úÖ Reading MagicCard.tsx")
        
        # Fix the gap calculation in CardGrid component
        old_gap_calc = """    // Improved gap calculation with better minimum spacing
    const baseGap = 10;  // Increased base gap for better spacing
    const proportionalGap = baseGap * clampedScale;
    const minGap = 8;   // Increased minimum gap (was 4px)
    const maxGap = 20;  // Increased maximum gap (was 16px)
    const boundedGap = Math.max(minGap, Math.min(maxGap, proportionalGap));
    const scaledGap = Math.round(boundedGap);"""
        
        new_gap_calc = """    // Consistent small gaps (about 1/3 of previous size)
    const baseGap = 4;  // Reduced base gap for tighter spacing
    const proportionalGap = baseGap * clampedScale;
    const minGap = 3;   // Small minimum gap
    const maxGap = 7;   // Small maximum gap  
    const boundedGap = Math.max(minGap, Math.min(maxGap, proportionalGap));
    const scaledGap = Math.round(boundedGap);"""
        
        if old_gap_calc in content:
            content = content.replace(old_gap_calc, new_gap_calc)
            print("‚úÖ Fixed gap calculation in MagicCard.tsx")
        else:
            print("‚ö†Ô∏è  Gap calculation in MagicCard.tsx not found in expected format")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
            
        return True
    except Exception as e:
        print(f"‚ùå Error fixing MagicCard.tsx: {str(e)}")
        return False

def fix_mtgo_layout_gaps():
    file_path = "src/components/MTGOLayout.tsx"
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("‚úÖ Reading MTGOLayout.tsx")
        
        # Fix 1: Collection area gap
        old_collection_gap = """              gap: `${Math.max(8, Math.min(20, Math.round(10 * cardSizes.collection)))}px`,"""
        new_collection_gap = """              gap: `${Math.max(3, Math.min(7, Math.round(4 * cardSizes.collection)))}px`,"""
        
        if old_collection_gap in content:
            content = content.replace(old_collection_gap, new_collection_gap)
            print("‚úÖ Fixed collection area gap")
        else:
            print("‚ö†Ô∏è  Collection area gap not found in expected format")
        
        # Fix 2: Deck area gap
        old_deck_gap = """                  gap: `${Math.max(8, Math.min(20, Math.round(10 * cardSizes.deck)))}px`,"""
        new_deck_gap = """                  gap: `${Math.max(3, Math.min(7, Math.round(4 * cardSizes.deck)))}px`,"""
        
        if old_deck_gap in content:
            content = content.replace(old_deck_gap, new_deck_gap)
            print("‚úÖ Fixed deck area gap")
        else:
            print("‚ö†Ô∏è  Deck area gap not found in expected format")
        
        # Fix 3: Sideboard area gap
        old_sideboard_gap = """                  gap: `${Math.max(8, Math.min(20, Math.round(10 * cardSizes.sideboard)))}px`,"""
        new_sideboard_gap = """                  gap: `${Math.max(3, Math.min(7, Math.round(4 * cardSizes.sideboard)))}px`,"""
        
        if old_sideboard_gap in content:
            content = content.replace(old_sideboard_gap, new_sideboard_gap)
            print("‚úÖ Fixed sideboard area gap")
        else:
            print("‚ö†Ô∏è  Sideboard area gap not found in expected format")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
            
        return True
    except Exception as e:
        print(f"‚ùå Error fixing MTGOLayout.tsx: {str(e)}")
        return False

def main():
    print("üéØ Fixing gap sizes to be consistent and about 1/3 current size")
    print("="*60)
    
    magic_card_success = fix_magic_card_gaps()
    mtgo_layout_success = fix_mtgo_layout_gaps()
    
    if magic_card_success and mtgo_layout_success:
        print(f"\nüéØ SUCCESS: Fixed gap sizes in both files")
        print("‚úÖ MagicCard.tsx: Updated CardGrid gap calculation")
        print("‚úÖ MTGOLayout.tsx: Updated all three area gap calculations")
        print("\nGap Size Changes:")
        print("‚Ä¢ Previous range: 8px - 20px")
        print("‚Ä¢ New range: 3px - 7px (about 1/3 the size)")
        print("‚Ä¢ All areas now use consistent gap formula")
        print("\nExpected Result:")
        print("‚Ä¢ Much tighter spacing between cards")
        print("‚Ä¢ More cards visible in each area")
        print("‚Ä¢ Consistent gaps across collection, deck, and sideboard")
        print("\nTest with 'npm start' to see the tighter card spacing!")
    else:
        print(f"\n‚ùå Some fixes failed - check the output above")

if __name__ == "__main__":
    main()
