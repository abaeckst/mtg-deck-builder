/* Panel Resizing Styles - Clean CSS/JavaScript Coordination */
/* Coordinates with ResizeHandles.css foundation and useResize.ts dynamic updates */

/* Base resize handle styling - foundation only */
.resize-handle {
  position: absolute;
  z-index: 1001;
  opacity: 0.7;
  transition: opacity 0.2s ease, background-color 0.2s ease;
}

.resize-handle:hover {
  opacity: 1;
}

/* Resizing state classes - for during resize operations */
.resizing-horizontal {
  cursor: ew-resize !important;
}

.resizing-vertical {
  cursor: ns-resize !important;
}

.resizing-horizontal *,
.resizing-vertical * {
  user-select: none !important;
  pointer-events: none !important;
}

/* Layout constraints during resize - prevent transitions */
.mtgo-layout.resizing {
  transition: none !important;
}

.mtgo-layout.resizing * {
  transition: none !important;
}

/* Enhanced visual feedback during resize */
.resize-handle {
  will-change: opacity, background;
}

/* Accessibility and touch support */
.resize-handle[title] {
  position: relative;
}

/* Panel size constraints - work with JavaScript calculations */
.mtgo-filter-panel {
  min-width: 200px;
  max-width: 500px;
}

.mtgo-sideboard-panel {
  min-width: 200px;
  max-width: 1000px;
}

.mtgo-deck-area,
.mtgo-bottom-area {
  min-height: 200px;
}

/* Enhanced hover feedback that works with ResizeHandles.css */
.resize-handle:hover {
  background-color: rgba(59, 130, 246, 0.3) !important;
}

.resize-handle:active {
  background-color: rgba(59, 130, 246, 0.5) !important;
}

/* Clean coordination - let ResizeHandles.css handle positioning and dimensions */
/* JavaScript (useResize.ts) handles dynamic sizing via CSS custom properties */
/* This file provides behavioral states and constraints only */
